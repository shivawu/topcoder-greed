# TEST CODE FOR PYTHON {{{
import sys as _sys
import time as _time
import math as _math

def tc_equal(expected, received):
    try:
        _t = type(expected)
        received = _t(received)
        if _t == list or _t == tuple:
            if len(expected) != len(received): return False
            return all(tc_equal(e, r) for (e, r) in zip(expected, received))
        elif _t == float:
            eps = 1e-9
            d = abs(received - expected)
            return not _math.isnan(received) and not _math.isnan(expected) and d <= eps * max(1.0, abs(expected))
        else:
            return expected == received
    except:
        return False

def pretty_str(x):
    if type(x) == str:
        return '"%s"' % x
    elif type(x) == tuple:
        return '(%s)' % (','.join( (pretty_str(y) for y in x) ) )
    else:
        return str(x)

def do_test(${Method.Params}, __expected):
    startTime = _time.time()
    instance = ${ClassName}()
    exception = None
    try:
        __result = instance.${Method.Name}(${foreach Method.Params par , }${par.Name}${end});
    except:
        import traceback
        exception = traceback.format_exc()
    elapsed = _time.time() - startTime   # in sec

    if exception is not None:
        _sys.stdout.write("RUNTIME ERROR: \\n")
        _sys.stdout.write(exception + "\\n")
        return 0

    if tc_equal(__expected, __result):
        _sys.stdout.write("PASSED! " + ("(%.3f seconds)" % elapsed) + "\\n")
        return 1
    else:
        _sys.stdout.write("FAILED! " + ("(%.3f seconds)" % elapsed) + "\\n")
        _sys.stdout.write("           Expected: " + pretty_str(__expected) + "\\n")
        _sys.stdout.write("           Received: " + pretty_str(__result) + "\\n")
        return 0

def run_tests():
    _sys.stdout.write("${Problem.Name} (${Problem.Score} Points)\\n\\n")

    passed = cases = 0
    case_set = set()
    for arg in _sys.argv[1:]:
        case_set.add(int(arg))

    with open("${Dependencies.testcase.GeneratedFileName}", "r") as f:
        while True:
            label = f.readline()
            if not label.startswith("--"): break

${<foreach Method.Params param}
${<if !param.Type.Array}
            ${param.Name} = ${param.Type;parser(f.readline().rstrip())}
${<else}
            ${param.Name} = []
            for i in range(0, int(f.readline())):
                ${param.Name}.append(${param.Type;parser(f.readline().rstrip())})
            ${param.Name} = tuple(${param.Name})
${<end}
${<end}
            f.readline()
${<if !Method.ReturnType.Array}
            __answer = ${Method.ReturnType;parser(f.readline().rstrip())}
${<else}
            __answer = []
            for i in range(0, int(f.readline())):
                __answer.append(${Method.ReturnType;parser(f.readline().rstrip())})
            __answer = tuple(__answer)
${<end}

            cases += 1
            if len(case_set) > 0 and (cases - 1) in case_set: continue
            _sys.stdout.write("  Testcase #%d ... " % (cases - 1))
            passed += do_test(${foreach Method.Params param , }${param.Name}${end}, __answer)

    _sys.stdout.write("\\nPassed : %d / %d cases\\n" % (passed, cases))

    T = _time.time() - ${CreateTime}
    PT, TT = (T / 60.0, 75.0)
    points = ${Problem.Score} * (0.3 + (0.7 * TT * TT) / (10.0 * PT * PT + TT * TT))
    _sys.stdout.write("Time   : %d minutes %d secs\\n" % (int(T/60), T%60))
    _sys.stdout.write("Score  : %.2f points\\n" % points)

if __name__ == '__main__':
    run_tests()

# }}}

